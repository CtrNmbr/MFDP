version: '3.9'

services:
  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    image: web-api-service:latest
    env_file:
      - .env
    environment:
      - PYTHONPATH=/:/app
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=sa
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy

  worker:
    build:
      context: ./app
      dockerfile: Dockerfile.worker
    image: task-worker-service:latest
    env_file:
      - .env
      - ./app/.env
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=sa
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    volumes:
      - ./app:/app
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    restart: always

  web-proxy:
    image: nginx:latest
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  rabbitmq:
    image: rabbitmq:3-management
    restart: on-failure
    env_file:
      - .env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5

  database:
    image: postgres:latest
    env_file:
      - ./app/.env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=sa
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  streamlit:
    build:
      context: ./app
      dockerfile: streamlit.Dockerfile
    container_name: streamlit_ui1
    restart: always
    volumes:
      - ./app:/app
    working_dir: /app
    ports:
      - "8085:8085"
    environment:
      - BASE_URL=http://app:8080  # URL FastAPI-приложения
    depends_on:
      - app

volumes:
  postgres_data: