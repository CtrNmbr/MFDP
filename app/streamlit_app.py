import streamlit as st
import requests

BASE_URL = "http://app:8080"

# –°–µ—Å—Å–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
if "token" not in st.session_state:
    st.session_state["token"] = None
if "user_id" not in st.session_state:
    st.session_state["user_id"] = None

st.title("üç∑ Wine Quality Prediction App")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register():
    st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    email = st.text_input("–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        response = requests.post(f"{BASE_URL}/user/signup", json={"email": email, "password": password})
        if response.status_code == 200 and response.json().get("message") == "User successfully registered!":  #.message == "User successfully registered!":
            st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
def login():
    st.subheader("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    email = st.text_input("–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    if st.button("–í–æ–π—Ç–∏"):
        response = requests.post(f"{BASE_URL}/user/signin", json={"email": email, "password": password})
        if response.status_code == 200:
            st.session_state["token"] = response.json()["access_token"]
            st.success("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

# –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
def get_account_details():
    st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    if st.session_state["token"] : #and st.session_state["user_id"]:
        headers = {"Authorization": f"Bearer {st.session_state['token']}"}
        response = requests.get(f"{BASE_URL}/account/details/", headers=headers)
        if response.status_code == 200:
            st.write(f" –í–∞—à user_id: {response.json()['user_id']}")
            st.write(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {response.json()['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
            st.write(f" –í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.json()['transactions']}")
        else:
            st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
def add_funds():
    st.subheader("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    amount = st.number_input("amount", value=0, step=1)
    if st.session_state["token"] and amount !=0 :#and st.session_state["user_id"]:

        headers = {"Authorization": f"Bearer {st.session_state['token']}"}
        data = {"amount": amount}
        response = requests.post(f"{BASE_URL}/account/fund/",json=data, headers=headers)
        if response.status_code == 200:
            st.write(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞: {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        else:
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–Ω–∞
def predict():
    st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–Ω–∞")
    fixed_acidity = st.number_input("fixed acidity")
    volatile_acidity = st.number_input("volatile acidity")
    citric_acid = st.number_input("citric acid")
    residual_sugar = st.number_input("residual sugar")
    chlorides = st.number_input("chlorides")
    free_sulfur_dioxide = st.number_input("free sulfur dioxide")
    total_sulfur_dioxide = st.number_input("total sulfur dioxide")
    density = st.number_input("density")
    pH = st.number_input("pH")
    sulphates = st.number_input("sulphates")
    alcohol = st.number_input("alcohol")
    if st.button("–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"):
        if st.session_state["token"] :#and st.session_state["user_id"]:

            headers = {"Authorization": f"Bearer {st.session_state['token']}"}
            data = {
                      "fixed acidity": fixed_acidity,
                      "volatile acidity": volatile_acidity,
                      "citric acid": citric_acid,
                      "residual sugar": residual_sugar,
                      "chlorides": chlorides,
                      "free sulfur dioxide": free_sulfur_dioxide,
                      "total sulfur dioxide": total_sulfur_dioxide,
                      "density": density,
                      "pH": pH,
                      "sulphates": sulphates,
                      "alcohol": alcohol
            }
            response = requests.post(f"{BASE_URL}/model/predict/", json=data, headers=headers)
            if response.status_code == 200:
                st.success(f"üç∑ –°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á –∏–ª–∏ –ø–æ id –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏. id –∑–∞–¥–∞—á–∏: {response.json()['task_id']}")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
        else:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

def history():
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    if st.session_state["token"] :#and st.session_state["user_id"]:
        headers = {"Authorization": f"Bearer {st.session_state['token']}"}
        response = requests.get(f"{BASE_URL}/model/history", headers=headers)
        if response.status_code == 200:
            history_data = response.json() #.json()["history"]
            #for entry in history_data:
                #st.write(f"{entry}")
            st.write(f"{history_data}")
        else:
            st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

def get_task():
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    task_id = st.text_input("task_id",value = '')
    if st.session_state["token"] and task_id != '':#and st.session_state["user_id"]:
        headers = {"Authorization": f"Bearer {st.session_state['token']}"}
        response = requests.get(f"{BASE_URL}/model/predictResult/{task_id}", headers=headers)
        if response.status_code == 200:
            history_data = response.json()
            for key,value in history_data.items():
                st.write(f"{key} = {value}")
        else:
            st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
    else:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è
menu = st.sidebar.selectbox("–ú–µ–Ω—é", ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π", "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"])
if menu == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
    register()
elif menu == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
    login()
elif menu == "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞":
    get_account_details()
elif menu == "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ":
    predict()
elif menu == "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π":
    history()
elif menu == "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è":
    get_task()
elif menu == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞":
    add_funds()
